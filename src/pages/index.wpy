<style lang="less">

.container {
  padding: 8px 0;
}

.picker-container {
  padding: 0 15px;
}

</style>

<template>

<view class="container">
  <picker class="picker-container" mode="date" value="{{date}}" bindchange="bindDateChange">
    <view>选择日期: {{date}}</view>
  </picker>
  <FeedList :feeds.sync="feeds"></FeedList>
  <view class="weui-cells__title" wx:if="{{feeds.length === 0}}">暂无内容...</view>
  <block wx:if="{{isLoading}}">
    <view class="weui-loadmore">
      <view class="weui-loading"></view>
      <view class="weui-loadmore__tips">正在加载...</view>
    </view>
  </block>
  <block wx:if="{{hasCompleted}}">
    <view class="weui-loadmore weui-loadmore_line weui-loadmore_dot">
      <view class="weui-loadmore__tips weui-loadmore__tips_in-line weui-loadmore__tips_in-dot"></view>
    </view>
  </block>
</view>

</template>

<script>

import wepy from 'wepy'
import moment from 'moment'

import FeedList from '../components/FeedList'
import config from '../config'
import { checkSession } from '../utils'

export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '叮咚小咚'
  }
  components = {
    FeedList
  }
  data = {
    feeds: [],
    date: moment().format('YYYY-MM-DD'),
    page: 1,
    isFetching: false,
    isLoading: false,
    hasCompleted: false,
  }
  methods = {
    bindDateChange: e => {
      this.date = e.detail.value
      this.restoreState()
      this.fetch()
    }
  }
  async fetch() {
    try {
      wx.showNavigationBarLoading()
      this.isFetching = true
      this.$apply()

      const sessionId = (await wepy.getStorage({ key: 'sessionId' })).data

      const url = `${config.baseUrl}/api/feeds?date=${moment(this.date).valueOf()}&page=${this.isLoading ? this.page : 1}&sessionId=${sessionId}`
      const feeds = await wepy.request(url)
      this.feeds = this.isLoading ? this.feeds.concat(feeds.data) : feeds.data

      return feeds
    } catch (e) {
      return []
    } finally {
      this.isFetching = false
      this.$apply()
      wx.hideNavigationBarLoading()
    }
  }
  async onLoad() {
    await checkSession()
    this.fetch()
  }
  restoreState() {
    this.page = 1
    this.hasCompleted = false
    this.$apply()
  }
  async onPullDownRefresh() {
    if (!this.isFetching) {
      wx.showNavigationBarLoading()

      await this.fetch()
      this.restoreState()

      wx.stopPullDownRefresh({
        complete: () => wx.hideNavigationBarLoading()
      })
    }
  }
  async onReachBottom() {
    if (!this.isFetching && !this.hasCompleted) {
      this.isLoading = true
      this.page += 1

      const feeds = await this.fetch()
      this.isLoading = false

      if (feeds.data.length === 0) {
        this.hasCompleted = true
      }

      this.$apply()
    }
  }
}

</script>
