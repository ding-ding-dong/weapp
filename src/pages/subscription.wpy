<style lang="less">

.weui-cells {
  .weui-cell {
    &:before {
      left: 0;
    }
  }
}

.mini-btn {
  margin: 0;
}

.actions {
  margin-left: 6px;

  .actions {
    display: inline-block;
  }
}

</style>

<template>

<view class="weui-panel weui-panel_access">
  <view class="weui-panel__bd">
    <repeat for="{{sourcesWithSubscription}}">
      <navigator url="./subscription-detail?source={{item.stringifySource}}" class="weui-media-box weui-media-box_appmsg" hover-class="weui-cell_active">
        <view class="weui-media-box__bd weui-media-box__bd_in-appmsg">
          <view class="weui-media-box__title">{{item.name}}</view>
          <view class="weui-media-box__desc">{{item.description}}</view>
        </view>
        <view class="actions">
          <view class="action" @tap.stop="subscribe">
            <button wx:if="{{!item.hasSubscribed}}" class="weui-btn mini-btn" type="primary" size="mini" plain="true" @tap="subscribe({{item.key}})">订阅</button>
          </view>
          <view class="action" @tap.stop="unsubscribe">
            <button wx:if="{{item.hasSubscribed}}" class="weui-btn mini-btn" type="warn" size="mini" plain="true" @tap="unsubscribe({{item.key}})">取消订阅</button>
          </view>
        </view>
      </navigator>
    </repeat>
  </view>
</view>

</template>

<script>

import wepy from 'wepy'

import config from '../config'
import { checkSession, makeUrlObject } from '../utils'

export default class Subscription extends wepy.page {
  config = {
    navigationBarTitleText: '我的订阅'
  }
  data = {
    sources: [],
    subscriptions: [],
    sourcesWithSubscription: [],
  }
  methods = {
    async subscribe(sourceKey) {
      const sessionId = (await wepy.getStorage({ key: 'sessionId' })).data
      const url = `${config.baseUrl}/api/subscriptions`

      await wepy.request({ url, method: 'POST', data: { sessionId, sourceKey } })
      this.fetch()
    },
    async unsubscribe(sourceKey) {
      const sessionId = (await wepy.getStorage({ key: 'sessionId' })).data
      const url = `${config.baseUrl}/api/subscriptions`

      await wepy.request({ url, method: 'DELETE', data: { sessionId, sourceKey } })
      this.fetch()
    }
  }
  async onShow() {
    await checkSession()
    this.fetch()
  }
  async fetch() {
    await Promise.all([this.fetchSources(), this.fetchSubscriptions()])
    this.combine()
  }
  async fetchSources() {
    wx.showNavigationBarLoading()

    const url = `${config.baseUrl}/api/sources`
    const result = await wepy.request(url)

    this.sources = result.data.map(source => {
      const icon = makeUrlObject(source.url).origin + '/favicon.ico'
      source = Object.assign({}, source, { icon })

      return source
    })
    this.$apply()

    wx.hideNavigationBarLoading()
  }
  async fetchSubscriptions() {
    const sessionId = (await wepy.getStorage({ key: 'sessionId' })).data
    const url = `${config.baseUrl}/api/subscriptions?sessionId=${sessionId}`

    this.subscriptions = (await wepy.request(url)).data
    this.$apply()
  }
  combine() {
    this.sourcesWithSubscription = this.sources.map(source => {
      source = Object.assign({}, source, { hasSubscribed: !!this.subscriptions.find(subscription => subscription === source.key) })
      source.stringifySource = JSON.stringify(source)

      return source
    })
    this.$apply()
  }
}

</script>
